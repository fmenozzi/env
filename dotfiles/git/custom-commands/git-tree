#!/usr/bin/env python3

import gitutils

import argparse
import sys

NO_UPSTREAM = '{NO_UPSTREAM}'

class GitTree():
    def __init__(self, args):
        self.upstreams = gitutils.upstreams()
        self.all_branches = set(self.upstreams.keys())
        self.starting_branch = gitutils.current_branch()
        self.no_color = args.no_color

        self.action = 'tree'
        if args.rebase:
            self.action = 'rebase'
        elif args.clean:
            self.action = 'clean'

    def run(self):
        if not gitutils.in_git_repo():
            return

        if self.action == 'rebase':
            self.visit_rebase(self.starting_branch)
            gitutils.git('checkout', [self.starting_branch])
            return

        if self.action == 'clean':
            self.visit_clean(self.starting_branch)
            return

        # Get remote roots
        rootlist = gitutils.remotes()

        # Add local roots
        num_local_roots = sum([b not in rootlist and not self.upstreams[b] for b in self.all_branches])
        if num_local_roots > 0:
            rootlist.append(NO_UPSTREAM)

        for root in rootlist:
            self.visit_tree(root, '')

    def visit_tree(self, branch, indent):
        if branch == self.starting_branch:
            self.colorprint('%s%s *' % (indent, branch), 'cyan', True)
        elif branch == NO_UPSTREAM:
            self.colorprint('%s%s' % (indent, branch), 'purple', False)
        elif gitutils.is_remote(branch) and not self.upstreams[branch]:
            self.colorprint('%s%s' % (indent, branch[8:]), 'red', True)
        else:
            self.colorprint('%s%s' % (indent, branch), 'green', False)

        for child in self.get_children(branch):
            self.visit_tree(child, indent + ' ')

    def visit_rebase(self, branch):
        if branch != self.starting_branch:
            gitutils.git('checkout', [branch])
            gitutils.git('pull', ['--rebase'])

        for child in self.get_children(branch):
            self.visit_rebase(child)

    def visit_clean(self, branch):
        for child in self.get_children(branch):
            self.visit_clean(child)

        if branch != self.starting_branch and gitutils.is_fully_merged_into_main(branch):
            gitutils.git('branch', ['-d', branch])

    def get_children(self, branch):
        children = [b for b in self.all_branches if self.upstreams[b] == branch]
        if branch == NO_UPSTREAM:
            children += [b for b in self.all_branches if not gitutils.is_remote(b) and not self.upstreams[b]]
        return children

    def colorprint(self, text, color, bold):
        if not sys.stdout.isatty() or self.no_color:
            print(text)
            return

        attr = []
        if color == 'red':
            attr.append('31')
        elif color == 'cyan':
            attr.append('36')
        elif color == 'purple':
            attr.append('35')
        else: # Default to green
            attr.append('32')

        if bold:
            attr.append('1')

        print('\x1b[%sm%s\x1b[0m' % (';'.join(attr), text))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--no-color', help='Turn off colored output', action='store_true')
    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument('--rebase', help='Rebase children', action='store_true')
    group.add_argument('--clean', help='Delete merged children', action='store_true')
    args = parser.parse_args()

    tree = GitTree(args)
    tree.run()
