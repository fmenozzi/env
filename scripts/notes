#!/usr/bin/env python3

import argparse
import os
import subprocess

NOTES_DIR = '/home/fed/fm/notes/'

def select_note():
    cmd = f'fd md -t f {NOTES_DIR} | fzf --preview="mdcat {{}}"'
    try:
        output = subprocess.check_output(cmd, shell=True)
    except subprocess.CalledProcessError as e:
        # fzf will return 130 if nothing is selected; output will still be empty
        output = e.output
    return output.decode('utf-8').strip()

def get_path_to_note(name):
    return os.path.join(NOTES_DIR, name + '.md')

def get_path_to_html(name):
    return os.path.join(NOTES_DIR, 'html', name + '.html')

def get_name_from_path(path):
    _, name_with_ext = os.path.split(path)
    name, _ = os.path.splitext(name_with_ext)
    return name

def open(args):
    if 'name' in args and args.name:
        name = args.name.removesuffix('.md')
        path_note = get_path_to_note(name)
    else:
        path_note = select_note()

    if path_note:
        dir_containing_note, _ = os.path.split(path_note)
        os.makedirs(dir_containing_note, exist_ok=True)
        os.system(f'nvim {path_note}')

def rm(args):
    if 'name' in args and args.name:
        path_note = get_path_to_note(args.name)
        path_html = get_path_to_html(args.name)
    else:
        path_note = select_note()
        name = get_name_from_path(path_note)
        path_html = os.path.join(NOTES_DIR, 'html', name + '.html')

    if path_note and path_html:
        os.system(f'rm -f {path_note} {path_html}')

def view(args):
    no_pager = args.no_pager if 'no_pager' in args else False
    cmd = 'mdcat' if no_pager else 'mdless'

    if 'name' in args and args.name:
        path_note = get_path_to_note(args.name)
    else:
        path_note = select_note()

    if path_note:
        os.system(f'{cmd} {path_note}')

def html(args):
    if 'name' in args and args.name:
        path_note = get_path_to_note(args.name)
        path_html = get_path_to_html(args.name)
    else:
        path_note = select_note()
        name = get_name_from_path(path_note)
        path_html = os.path.join(NOTES_DIR, 'html', name + '.html')

    if path_note and path_html:
        os.system(f'pandoc {path_note} -s -o {path_html}')

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.set_defaults(func=view)
    subparsers = parser.add_subparsers()

    parser_open = subparsers.add_parser('open', help='open notes')
    parser_open.add_argument('name', nargs='?', default='', help='name of note to open')
    parser_open.set_defaults(func=open)

    parser_rm = subparsers.add_parser('rm', help='remove notes')
    parser_rm.add_argument('name', nargs='?', default='', help='name of note to remove')
    parser_rm.set_defaults(func=rm)

    parser_view = subparsers.add_parser('view', help='view notes in terminal')
    parser_view.add_argument('name', nargs='?', default='', help='name of note to view')
    parser_view.add_argument('--no-pager', action='store_true', help='output directly to stdout')
    parser_view.set_defaults(func=view)

    parser_html = subparsers.add_parser('html', help='generate html from notes')
    parser_html.add_argument('name', nargs='?', default='', help='name of note to convert to html')
    parser_html.set_defaults(func=html)

    args = parser.parse_args()
    args.func(args)
