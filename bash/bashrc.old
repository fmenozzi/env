# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

alias fuck='$(thefuck $(fc -ln -1))'
alias IOWNYOU='sudo "$BASH" -c "$(history -p !!)"'
alias sl='ls'

alias gits='git status'
alias gitl='git log'
alias gitd='git diff'
alias gitdc='git diff --cached'

alias clear='clear'
alias clare='clear'
alias lear='clear'
alias clea='clear'
alias lcear='clear'

alias amke='make'
alias maek='make'
alias mkae='make'

alias update='~/update.sh'

alias chrome='google-chrome-stable'

alias g='googler'
alias j='jobs'

alias lc='wc -l'

alias na='ninja'

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

alias tmux='tmux -2'

alias vim='nvim'

set -o vi

export _Z_CMD=f

. ~/z.sh

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#Enable tab completion
source ~/git-completion.bash

# Colors!
green="\[\033[0;32m\]"
blue="\[\033[0;34m\]"
purple="\[\033[0;35m\]"
reset="\[\033[0m\]"

txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
bakgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
txtrst='\e[0m'    # Text Reset

# Change command prompt
source ~/git-prompt.sh
export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
# '\W' adds the name of the current directory
# '\$(__git_ps1)' adds git-related stuff
export PS1="\[$bldwht\]\W\[$bldgrn\]\$(__git_ps1)\[$bldcyn\] âžœ  $reset"

export GOPATH=~/go

export PATH=$PATH:~/dotfiles/git/custom-commands:~/.cargo/bin

export RUST_SRC_PATH=~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/

# Add rustup completions
source ~/.rustup-completions.sh

# "Alias" for "tmux a -t <session>" (with tab completion)
ta() {
    local session_name="$1"
    tmux a -t "$session_name"
}
_ta() {
    COMPREPLY=()
    local session="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "$(tmux list-sessions 2>/dev/null | awk -F: '{ print $1 }')" -- "$session") )
}
complete -F _ta ta

# "Alias" for "tmux new -s <session>"
tn() {
    local session_name="$1"
    tmux new -s "$session_name"
}

# "Alias" for "tmux ls" (prettier output)
tl() {
    # Get current session name (empty string if detached)
    local session_name=$(tmux ls -F '#{session_name} #{session_attached}' | awk '$2=="1" {print $1}')

    # Print each session, with a different color for the current one
    IFS=$'\n'
    local all_session_names=($(tmux ls -F '#{session_name}'))
    for s in "${all_session_names[@]}"; do
        if [ "$s" == "$session_name" ]; then
            echo -e "${bldcyn}$s *${txtrst}"
        else
            echo -e "${txtgrn}$s${txtrst}"
        fi
    done
    unset IFS
}

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fdfind -t d . $HOME"

alias o='vim $(fzf)'

# THINGS TO CONSIDER:
#   - Maybe we could change the above alias to search over home directory by default?
#       - or maybe we replace it with something like alt-o at the kitty.config level
#           - MIGHT require a kitten script?
#   - Maybe we could include an extra vim-level leader-based alias for home directory find?
#       - e.g. <leader>F for home-directory search (no directories)
#       - or else we just change the fzf command for <leader>f to search through home without
#         directories, instead of adding a separate alias
#   - Allow searching hidden files/directories for some of these?
#       - e.g. can't cd into save_data with above alt-c, since it's in ~/.local/
#   - Anyway to make Ctrl-R automatically hit Enter for us after selecting command?
#       - is that even desirable?
